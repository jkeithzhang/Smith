{
  "name": "nexpect",
  "description": "Spawns and interacts with child processes using spawn / expect commands",
  "version": "0.2.4",
  "author": {
    "name": "Elijah Insua",
    "email": "tmpvar@gmail.com"
  },
  "contributors": [
    {
      "name": "Charlie Robbins",
      "email": "charlie@nodejitsu.com"
    },
    {
      "name": "Marak Squires",
      "email": "marak@nodejitsu.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/nodejitsu/nexpect.git"
  },
  "keywords": [
    "nexpect",
    "spawn",
    "child process",
    "terminal"
  ],
  "devDependencies": {
    "colors": "0.x.x",
    "prompt": "0.1.x >=0.1.5",
    "vows": "0.5.x"
  },
  "main": "./lib/nexpect",
  "scripts": {
    "test": "vows --spec"
  },
  "engines": {
    "node": ">= 0.2.0"
  },
  "readme": "# nexpect\n\n`nexpect` is a node.js module for spawning child applications (such as ssh) and seamlessly controlling them using javascript callbacks. nexpect is based on the ideas of the [expect][0] library by Don Libes and the [pexpect][1] library by Noah Spurrier. \n\n## Motivation\n\nnode.js has good built in control for spawning child processes. `nexpect` builds on these core methods and allows developers to easily pipe data to child processes and assert the expected response. `nexpect` also chains, so you can compose complex terminal interactions.\n\n## Installation\n\n### Installing npm (node package manager)\n``` bash\n  $ curl http://npmjs.org/install.sh | sh\n```\n\n### Installing nexpect\n``` bash\n  $ npm install nexpect\n```\n\n## Usage\n\n### Basic usage\n\nThe core method, `nexpect.spawn(command, [params], [options])`, takes three parameters: \n\n* command: The command that you wish to spawn\n* params: The argv that you want to pass to the child process\n* options: An object literal which may contain\n  - cwd: Current working directory of the child process.\n  - ignoreCase: Ignores the case of any output from the child process.\n  - stripColors: Strips any ANSI colors from the output for `.expect()` and `.wait()` statements.\n  - verbose: Writes the stdout for the child process to `process.stdout` of the current process.\n  \n  \n  \nLets take a look at some sample usage:\n\n``` js\n  var nexpect = require('nexpect');\n\n  nexpect.spawn(\"echo\", [\"hello\"])\n         .expect(\"hello\")\n         .run(function (err) {\n           if (!err) {\n             console.log(\"hello was echoed\");\n           }\n         });\n\n  nexpect.spawn(\"ls -la /tmp/undefined\")\n         .expect(\"No such file or directory\")\n         .run(function (err) {\n           if (!err) {\n             console.log(\"checked that file doesn't exists\");\n           }\n         });\n\n  nexpect.spawn(\"node\")\n         .expect(\">\")\n         .sendline(\"console.log('testing')\")\n         .expect(\"testing\")\n         .sendline(\"process.exit()\")\n         .run(function (err) {\n           if (!err) {\n             console.log(\"node process started, console logged, process exited\");\n           }\n           else {\n             console.log(err)\n           }\n         });\n```\n\nIf you are looking for more examples take a look at the [examples][2], and [tests][3].\n\n## Tests\n\nAll tests are written with [vows][4]:\n\n``` bash\n  $ npm test\n```\n\n## Authors\n[Elijah Insua][5] [Marak Squires][6], and [Charlie Robbins][7].\n\n[0]: http://search.cpan.org/~rgiersig/Expect-1.21/Expect.pod\n[1]: http://pexpect.sourceforge.net/pexpect.html\n[2]: https://github.com/nodejitsu/nexpect/tree/master/examples\n[3]: https://github.com/nodejitsu/nexpect/tree/master/test/nexpect-test.js\n[4]: http://vowsjs.org\n[5]: http://github.com/tmpvar\n[6]: http://github.com/marak\n[7]: http://github.com/indexzero",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/nodejitsu/nexpect/issues"
  },
  "_id": "nexpect@0.2.4",
  "dist": {
    "shasum": "193aa9f2f0004a37f737bd6f728dde5a5bd68332"
  },
  "_from": "nexpect@",
  "_resolved": "https://registry.npmjs.org/nexpect/-/nexpect-0.2.4.tgz"
}
